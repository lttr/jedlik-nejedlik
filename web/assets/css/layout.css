/* Sources:
* https://layout-breakouts-builder.vercel.app/
* https://www.youtube.com/watch?v=c13gpBrnGEw
*/

:is(.p-page-layout, .p-full-bg) {
  --minimum-content-padding: var(--grid-gutter);

  /** TRACK WIDTHS **/

  /* 1fr takes as much space as available. Specific values may be used for
   * narrower page layout. */
  --full-max-width: 1fr;
  /* --grid-max-width comes from Utopia grid and is calculated in a way to make
   * something like 12 columns grid possible and aligned with other values in
   * this system. */
  --content-max-width: var(--grid-max-width);
  --popout-factor: 1.2;
  --inset-factor: 0.8;
  --popout-max-width: calc(var(--grid-max-width) * var(--popout-factor));
  --inset-max-width: calc(var(--grid-max-width) * var(--inset-factor));

  /** TRACK SIZES **/
  /* Track sizes represent a fraction, that is subtracted from the available space. */

  /* Makes sure the content always have a minimum padding. */
  --full: minmax(var(--minimum-content-padding), var(--full-max-width));
  /* Since the fraction is subtracted twice from the available space the formula
   * uses 0.5 times. */
  --popout: minmax(
    0,
    calc((var(--popout-max-width) - var(--content-max-width)) * 0.5)
  );
  /* The grid-gutter is subtracted as well from the available space in order to
   * align with a definition of a grid in Utopia design. The container is padded
   * with grid-gutter on each side.
   * Source: https://utopia.fyi/grid/
   */
  --content: minmax(
    0,
    calc(
      (var(--content-max-width) - var(--inset-max-width)) * 0.5 -
        var(--grid-gutter)
    )
  );
  /* A track that is representing the middle area. This track does not count
   * twice so the formula is different than the others. It makes sure the
   * content has a maximum width. */
  --inset: min(
    var(--inset-max-width),
    100% - var(--minimum-content-padding) * 2
  );

  display: grid;
  grid-template-columns:
    [full-start] var(--full)
    [popout-start] var(--popout)
    [content-start] var(--content)
    [inset-start] var(--inset) [inset-end]
    var(--content) [content-end]
    var(--popout) [popout-end]
    var(--full) [full-end];
}

/* If not specified with other classes otherwise, the elements inside the layout
 * will span the middle content area. */
:is(.p-page-layout, .p-full-bg) > * {
  grid-column: content;
}

/** CLASSES **/

.p-inset {
  grid-column: inset;
}
.p-inset-start {
  grid-column-start: inset-start;
}
.p-inset-end {
  grid-column-end: inset-end;
}

.p-content {
  grid-column: content;
}
.p-content-start {
  grid-column-start: content-start;
}
.p-content-end {
  grid-column-end: content-end;
}

.p-popout {
  grid-column: popout;
}
.p-popout-start {
  grid-column-start: popout-start;
}
.p-popout-end {
  grid-column-end: popout-end;
}

.p-full {
  grid-column: full;
}
.p-full-start {
  grid-column-start: full-start;
}
.p-full-end {
  grid-column-end: full-end;
}

/* Applies the page layout onto itself.
 *
 * Background spans the full width, while the content remains in the middle
 * content track. */
.p-full-bg {
  grid-column: full;
}

/* Spans the full width, content is padded a little on both sides. */
.p-full-padded {
  grid-column: full;
  padding-inline: var(--minimum-content-padding);
}
